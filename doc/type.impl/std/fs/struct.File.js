(function() {var type_impls = {
"self_update":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-File\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#338\">source</a><a href=\"#impl-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.open\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#366\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.open\" class=\"fn\">open</a>&lt;P&gt;(path: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to open a file in read-only mode.</p>\n<p>See the <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> method for more details.</p>\n<p>If you only need to read the entire file contents,\nconsider <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/fn.read.html\" title=\"fn std::fs::read\"><code>std::fs::read()</code></a> or\n<a href=\"https://doc.rust-lang.org/1.76.0/std/fs/fn.read_to_string.html\" title=\"fn std::fs::read_to_string\"><code>std::fs::read_to_string()</code></a> instead.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<p>This function will return an error if <code>path</code> does not already exist.\nOther errors may also be returned according to <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Read;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = <span class=\"macro\">vec!</span>[];\n    f.read_to_end(<span class=\"kw-2\">&amp;mut </span>data)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#395\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.create\" class=\"fn\">create</a>&lt;P&gt;(path: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Opens a file in write-only mode.</p>\n<p>This function will create a file if it does not exist,\nand will truncate it if it does.</p>\n<p>Depending on the platform, this function may fail if the\nfull directory path does not exist.\nSee the <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> function for more details.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/fn.write.html\" title=\"fn std::fs::write\"><code>std::fs::write()</code></a> for a simple function to\ncreate a file with a given data.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Write;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"kw-2\">&amp;</span><span class=\"number\">1234_u32</span>.to_be_bytes())<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_new\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#426\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.create_new\" class=\"fn\">create_new</a>&lt;P&gt;(path: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>file_create_new</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new file in read-write mode; error if the file exists.</p>\n<p>This function will create a file if it does not exist, or return an error if it does. This\nway, if the call succeeds, the file returned is guaranteed to be new.</p>\n<p>This option is useful because it is atomic. Otherwise between checking whether a file\nexists and creating a new one, the file may have been created by another process (a TOCTOU\nrace condition / attack).</p>\n<p>This can also be written using\n<code>File::options().read(true).write(true).create_new(true).open(...)</code>.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(file_create_new)]\n\n</span><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Write;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create_new(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"string\">\"Hello, world!\"</span>.as_bytes())<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.options\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#458\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.options\" class=\"fn\">options</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\"><p>Returns a new OpenOptions object.</p>\n<p>This function returns a new OpenOptions object that you can use to\nopen or create a file with specific options if <code>open()</code> or <code>create()</code>\nare not appropriate.</p>\n<p>It is equivalent to <code>OpenOptions::new()</code>, but allows you to write more\nreadable code. Instead of\n<code>OpenOptions::new().append(true).open(&quot;example.log&quot;)</code>,\nyou can write <code>File::options().append(true).open(&quot;example.log&quot;)</code>. This\nalso avoids the need to import <code>OpenOptions</code>.</p>\n<p>See the <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.OpenOptions.html#method.new\" title=\"associated function std::fs::OpenOptions::new\"><code>OpenOptions::new</code></a> function for more details.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Write;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::options().append(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"example.log\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">writeln!</span>(<span class=\"kw-2\">&amp;mut </span>f, <span class=\"string\">\"new line\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sync_all\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#486\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.sync_all\" class=\"fn\">sync_all</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to sync all OS-internal metadata to disk.</p>\n<p>This function will attempt to ensure that all in-memory data reaches the\nfilesystem before returning.</p>\n<p>This can be used to handle errors that would otherwise only be caught\nwhen the <code>File</code> is closed.  Dropping a file will ignore errors in\nsynchronizing this in-memory data.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"string\">b\"Hello, world!\"</span>)<span class=\"question-mark\">?</span>;\n\n    f.sync_all()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sync_data\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#517\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.sync_data\" class=\"fn\">sync_data</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This function is similar to <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#method.sync_all\" title=\"method std::fs::File::sync_all\"><code>sync_all</code></a>, except that it might not\nsynchronize file metadata to the filesystem.</p>\n<p>This is intended for use cases that must synchronize content, but don’t\nneed the metadata on disk. The goal of this method is to reduce disk\noperations.</p>\n<p>Note that some platforms may simply implement this in terms of\n<a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#method.sync_all\" title=\"method std::fs::File::sync_all\"><code>sync_all</code></a>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"string\">b\"Hello, world!\"</span>)<span class=\"question-mark\">?</span>;\n\n    f.sync_data()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#555\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;self, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Truncates or extends the underlying file, updating the size of\nthis file to become <code>size</code>.</p>\n<p>If the <code>size</code> is less than the current file’s size, then the file will\nbe shrunk. If it is greater than the current file’s size, then the file\nwill be extended to <code>size</code> and have all of the intermediate data filled\nin with 0s.</p>\n<p>The file’s cursor isn’t changed. In particular, if the cursor was at the\nend and the file is shrunk using this operation, the cursor will now be\npast the end.</p>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<p>This function will return an error if the file is not opened for writing.\nAlso, <a href=\"https://doc.rust-lang.org/1.76.0/std/io/error/enum.ErrorKind.html#variant.InvalidInput\" title=\"variant std::io::error::ErrorKind::InvalidInput\"><code>std::io::ErrorKind::InvalidInput</code></a>\nwill be returned if the desired length would cause an overflow due to\nthe implementation specifics.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.set_len(<span class=\"number\">10</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n<p>Note that this method alters the content of the underlying file, even\nthough it takes <code>&amp;self</code> rather than <code>&amp;mut self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#573\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.metadata\" class=\"fn\">metadata</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Queries metadata about the underlying file.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>metadata = f.metadata()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_clone\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#617\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.try_clone\" class=\"fn\">try_clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>File</code> instance that shares the same underlying file handle\nas the existing <code>File</code> instance. Reads, writes, and seeks will affect\nboth <code>File</code> instances simultaneously.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<p>Creates two handles for a file named <code>foo.txt</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_copy = file.try_clone()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n<p>Assuming there’s a file named <code>foo.txt</code> with contents <code>abcdef\\n</code>, create\ntwo handles, seek one of them, and read the remaining bytes from the\nother handle:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::SeekFrom;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file_copy = file.try_clone()<span class=\"question-mark\">?</span>;\n\n    file.seek(SeekFrom::Start(<span class=\"number\">3</span>))<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>contents = <span class=\"macro\">vec!</span>[];\n    file_copy.read_to_end(<span class=\"kw-2\">&amp;mut </span>contents)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(contents, <span class=\"string\">b\"def\\n\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_permissions\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#654\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.set_permissions\" class=\"fn\">set_permissions</a>(&amp;self, perm: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.Permissions.html\" title=\"struct std::fs::Permissions\">Permissions</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Changes the permissions on the underlying file.</p>\n<h5 id=\"platform-specific-behavior\"><a href=\"#platform-specific-behavior\">Platform-specific behavior</a></h5>\n<p>This function currently corresponds to the <code>fchmod</code> function on Unix and\nthe <code>SetFileInformationByHandle</code> function on Windows. Note that, this\n<a href=\"https://doc.rust-lang.org/1.76.0/std/io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<p>This function will return an error if the user lacks permission change\nattributes on the underlying file. It may also return an error in other\nos-specific unspecified cases.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs::File;\n\n    <span class=\"kw\">let </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>perms = file.metadata()<span class=\"question-mark\">?</span>.permissions();\n    perms.set_readonly(<span class=\"bool-val\">true</span>);\n    file.set_permissions(perms)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n<p>Note that this method alters the permissions of the underlying file,\neven though it takes <code>&amp;self</code> rather than <code>&amp;mut self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_times\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#695\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.set_times\" class=\"fn\">set_times</a>(&amp;self, times: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.FileTimes.html\" title=\"struct std::fs::FileTimes\">FileTimes</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Changes the timestamps of the underlying file.</p>\n<h5 id=\"platform-specific-behavior-1\"><a href=\"#platform-specific-behavior-1\">Platform-specific behavior</a></h5>\n<p>This function currently corresponds to the <code>futimens</code> function on Unix (falling back to\n<code>futimes</code> on macOS before 10.13) and the <code>SetFileTime</code> function on Windows. Note that this\n<a href=\"https://doc.rust-lang.org/1.76.0/std/io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<p>This function will return an error if the user lacks permission to change timestamps on the\nunderlying file. It may also return an error in other os-specific unspecified cases.</p>\n<p>This function may return an error if the operating system lacks support to change one or\nmore of the timestamps set in the <code>FileTimes</code> structure.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs::{<span class=\"self\">self</span>, File, FileTimes};\n\n    <span class=\"kw\">let </span>src = fs::metadata(<span class=\"string\">\"src\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>dest = File::options().write(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"dest\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>times = FileTimes::new()\n        .set_accessed(src.accessed()<span class=\"question-mark\">?</span>)\n        .set_modified(src.modified()<span class=\"question-mark\">?</span>);\n    dest.set_times(times)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_modified\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#704\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html#tymethod.set_modified\" class=\"fn\">set_modified</a>(&amp;self, time: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Changes the modification time of the underlying file.</p>\n<p>This is an alias for <code>set_times(FileTimes::new().set_modified(time))</code>.</p>\n</div></details></div></details>",0,"self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromRawHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/raw.rs.html#159\">source</a></span><a href=\"#impl-FromRawHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.FromRawHandle.html\" title=\"trait std::os::windows::io::raw::FromRawHandle\">FromRawHandle</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/raw.rs.html#161\">source</a><a href=\"#method.from_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.FromRawHandle.html#tymethod.from_raw_handle\" class=\"fn\">from_raw_handle</a>(handle: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html\">*mut </a><a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"File\">ⓘ</a></h4></section></summary><div class='docblock'>Constructs a new I/O object from the specified raw handle. <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.FromRawHandle.html#tymethod.from_raw_handle\">Read more</a></div></details></div></details>","FromRawHandle","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/handle.rs.html#496\">source</a></span><a href=\"#impl-AsHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/handle/trait.AsHandle.html\" title=\"trait std::os::windows::io::handle::AsHandle\">AsHandle</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/handle.rs.html#498\">source</a><a href=\"#method.as_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/handle/trait.AsHandle.html#tymethod.as_handle\" class=\"fn\">as_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/handle/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::handle::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Borrows the handle. <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/handle/trait.AsHandle.html#tymethod.as_handle\">Read more</a></div></details></div></details>","AsHandle","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoRawHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/raw.rs.html#170\">source</a></span><a href=\"#impl-IntoRawHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.IntoRawHandle.html\" title=\"trait std::os::windows::io::raw::IntoRawHandle\">IntoRawHandle</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/raw.rs.html#172\">source</a><a href=\"#method.into_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.IntoRawHandle.html#tymethod.into_raw_handle\" class=\"fn\">into_raw_handle</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html\">*mut </a><a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a></h4></section></summary><div class='docblock'>Consumes this object, returning the raw underlying handle. <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.IntoRawHandle.html#tymethod.into_raw_handle\">Read more</a></div></details></div></details>","IntoRawHandle","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FileExt-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows/fs.rs.html#88\">source</a></span><a href=\"#impl-FileExt-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/fs/trait.FileExt.html\" title=\"trait std::os::windows::fs::FileExt\">FileExt</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.seek_read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows/fs.rs.html#89\">source</a><a href=\"#method.seek_read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/fs/trait.FileExt.html#tymethod.seek_read\" class=\"fn\">seek_read</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Seeks to a given position and reads a number of bytes. <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/fs/trait.FileExt.html#tymethod.seek_read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.seek_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows/fs.rs.html#93\">source</a><a href=\"#method.seek_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/fs/trait.FileExt.html#tymethod.seek_write\" class=\"fn\">seek_write</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Seeks to a given position and writes a number of bytes. <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/fs/trait.FileExt.html#tymethod.seek_write\">Read more</a></div></details></div></details>","FileExt","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#812\">source</a></span><a href=\"#impl-Read-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#813\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#816\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#819\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Pull some bytes from this source into the specified buffer. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#823\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#826\">source</a><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#829\">source</a><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#917\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#951\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/io/borrowed_buf/struct.BorrowedCursor.html\" title=\"struct core::io::borrowed_buf::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>)</span></div></span><div class='docblock'>Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1003-1005\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1046-1048\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transforms this <code>Read</code> instance to an <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1084-1086\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will chain this stream with another. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1123-1125\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Read.html#method.take\">Read more</a></div></details></div></details>","Read","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#733\">source</a></span><a href=\"#impl-Debug-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#734\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IsTerminal-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/stdio.rs.html#1087\">source</a></span><a href=\"#impl-IsTerminal-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/io/stdio/trait.IsTerminal.html\" title=\"trait std::io::stdio::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_terminal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/stdio.rs.html#1087\">source</a><a href=\"#method.is_terminal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/stdio/trait.IsTerminal.html#tymethod.is_terminal\" class=\"fn\">is_terminal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the descriptor/handle refers to a terminal/tty. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/stdio/trait.IsTerminal.html#tymethod.is_terminal\">Read more</a></div></details></div></details>","IsTerminal","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRawHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/raw.rs.html#97\">source</a></span><a href=\"#impl-AsRawHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.AsRawHandle.html\" title=\"trait std::os::windows::io::raw::AsRawHandle\">AsRawHandle</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/raw.rs.html#99\">source</a><a href=\"#method.as_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.AsRawHandle.html#tymethod.as_raw_handle\" class=\"fn\">as_raw_handle</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html\">*mut </a><a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a></h4></section></summary><div class='docblock'>Extracts the raw handle. <a href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/raw/trait.AsRawHandle.html#tymethod.as_raw_handle\">Read more</a></div></details></div></details>","AsRawHandle","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Seek-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#851\">source</a></span><a href=\"#impl-Seek-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.seek\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#852\">source</a><a href=\"#method.seek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/std/io/enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Seek to an offset, in bytes, in a stream. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#tymethod.seek\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rewind\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1928\">source</a></span><a href=\"#method.rewind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Rewind to the beginning of a stream. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.rewind\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1968\">source</a><a href=\"#method.stream_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>)</span></div></span><div class='docblock'>Returns the length of this stream (in bytes). <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.stream_len\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_position\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#2005\">source</a></span><a href=\"#method.stream_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Returns the current seek position from the start of the stream. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.stream_position\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.seek_relative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#2034\">source</a><a href=\"#method.seek_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_seek_relative</code>)</span></div></span><div class='docblock'>Seeks relative to the current position. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Seek.html#method.seek_relative\">Read more</a></div></details></div></details>","Seek","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#834\">source</a></span><a href=\"#impl-Write-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#835\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#838\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#842\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/fs.rs.html#846\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1668\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1733\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1789\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/io/mod.rs.html#1845-1847\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","self_update::GetArchiveReaderResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COwnedHandle%3E-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/handle.rs.html#512\">source</a></span><a href=\"#impl-From%3COwnedHandle%3E-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/handle/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::handle::OwnedHandle\">OwnedHandle</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/std/os\\windows\\io/handle.rs.html#514\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/os/windows/io/handle/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::handle::OwnedHandle\">OwnedHandle</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/fs/struct.File.html\" title=\"struct std::fs::File\">File</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"File\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<OwnedHandle>","self_update::GetArchiveReaderResult"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()